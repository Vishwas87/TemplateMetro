/*
 * File: app/view/AppWindow_tpl.js
 *
 * This file was generated by Sencha Architect version 3.0.4.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 4.2.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 4.2.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('TemplateMetro.view.AppWindow_tpl', {
    extend: 'Ext.window.Window',
    alias: 'widget.appwindowTpl',

    mixins: {
        mix: 'MetroMixin.view.AppWindow_tpl'
    },
    requires: [
        'Ext.view.View',
        'Ext.XTemplate',
        'Ext.container.Container',
        'Ext.dd.ScrollManager',
        'Ext.util.Point',
        'Ext.dd.DragZone',
        'Ext.dd.DropZone'
    ],

    border: false,
    cls: 'metro_appWindowTpl',
    draggable: false,
    height: 250,
    width: 400,
    resizable: false,
    layout: 'border',
    bodyCls: 'metro_appWindowTplBody',
    closable: false,
    frameHeader: false,
    header: false,
    overlapHeader: false,
    title: 'My Window',
    maximized: true,

    initComponent: function() {
        var me = this;

        Ext.applyIf(me, {
            items: [
                {
                    xtype: 'dataview',
                    role: 'sidebar',
                    dragItemSize: {
                        width: 100,
                        height: 100
                    },
                    preloaderSize: {
                        width: 48,
                        height: 48
                    },
                    region: 'east',
                    cls: 'metro_appWindowTpl_sidebar',
                    maxWidth: 325,
                    minWidth: 310,
                    width: 310,
                    autoScroll: true,
                    itemSelector: 'div.metro_appWindowTpl_sidebar_wdg',
                    itemTpl: Ext.create('Ext.XTemplate', 
                        '<tpl for =".">',
                        '        <div class ="metro_appWindowTpl_sidebar_wdg {cls}" ',
                        '             id = "app_{app_id}{multirunning:this.getUnique}" >',
                        '            <img src="app/resources/img/preloader.GIF" ',
                        '                 id="{app_id}{multirunning:this.getUnique}_preloader" ',
                        '                 class="metro_appWindow_preloader_wdg">',
                        '            <div id="{app_id}{multirunning:this.getUnique}_body" ',
                        '                 style="display:none;"  class="metro_appWindowTpl_sidebar_body_wdg"></div>',
                        '        </div>    ',
                        '</tpl>    ',
                        '',
                        '',
                        '',
                        {
                            getUnique: function(multirunning) {
                                var timestamp = new Date().getTime();

                                if(multirunning) return "_"+timestamp;
                                return "";
                            }
                        }
                    ),
                    store: 'TemplateStr_RunningWidget',
                    listeners: {
                        render: {
                            fn: me.onDataviewRender,
                            scope: me
                        }
                    }
                },
                {
                    xtype: 'container',
                    role: 'content',
                    flex: 1,
                    region: 'center',
                    layout: {
                        type: 'vbox',
                        align: 'stretch',
                        pack: 'end'
                    },
                    items: [
                        {
                            xtype: 'container',
                            role: 'header',
                            flex: 1,
                            height: 40,
                            maxHeight: 40,
                            minHeight: 40
                        },
                        {
                            xtype: 'container',
                            role: 'appbody',
                            flex: 1,
                            layout: 'fit'
                        },
                        {
                            xtype: 'container',
                            role: 'footer',
                            flex: 1,
                            height: 40,
                            maxHeight: 40,
                            minHeight: 40
                        },
                        {
                            xtype: 'container',
                            flex: 1,
                            cls: 'metro_appWindowTpl_listbar_container',
                            height: 110,
                            maxHeight: 125,
                            minHeight: 110,
                            autoScroll: true,
                            layout: 'fit',
                            items: [
                                {
                                    xtype: 'dataview',
                                    dragItemSize: {
                                        width: 100,
                                        height: 100
                                    },
                                    itemSize: {
                                        width: 105,
                                        height: 110
                                    },
                                    cls: 'metro_appWindowTpl_listbar',
                                    height: 110,
                                    maxHeight: 125,
                                    minHeight: 110,
                                    width: 200,
                                    itemSelector: 'div.metro_appWindowTpl_listbar_wdg',
                                    itemTpl: [
                                        '<tpl for = ".">',
                                        '    <div class ="metro_appWindowTpl_listbar_wdg">',
                                        '        <img  src="{icon}">   ',
                                        '    </div>',
                                        '</tpl>',
                                        ''
                                    ],
                                    store: 'TemplateStr_Apps',
                                    listeners: {
                                        render: {
                                            fn: me.onDataviewRender1,
                                            scope: me
                                        }
                                    }
                                }
                            ]
                        }
                    ]
                }
            ]
        });

        me.callParent(arguments);
    },

    onDataviewRender: function(component, eOpts) {
        component.el.on("contextmenu", Ext.emptyFn, null, {preventDefault: true}); //Disable context menu
        component.lastTarget = null; //Usefull for sorting tiles
        var win = component.up("window");
        var appRef = CloudCommon.getAppRef(win.$className);

        var controller = appRef.app.getTemplateCnt_tplController();

        if(win)
        {
            Ext.dd.ScrollManager.register(component.el);
            component.el.ddScrollConfig = {
                vthresh: 50,
                hthresh: -1,
                increment: 200,
                animate:true
            };

            component.dragZone = new Ext.dd.DragZone(component.el, {
                containerScroll: true,
                ddGroup: CloudCommon.getNamespaceFromClass(component.$className),
                endDrag : function(e) {
                    if (!component.dragData) { return true; }
                    controller.TemplateCnt_tpl_saveSidebarConfiguration();
                    component.fireEvent('itemdrop', component.dragData.info.origIdx,
                                        component.dragData.info.lastIdx, component.dragData.info.record);
                    return true;
                },
                getDragData: function(e) {
                    var sourceEl = e.getTarget(component.itemSelector);
                    var idx = component.indexOf(sourceEl);
                    if (sourceEl) {
                        d = sourceEl.cloneNode(false);
                        d.style.width = component.dragItemSize.width +"px";
                        d.style.height = component.dragItemSize.height +"px";
                        d.id = Ext.id();
                        return component.dragData = {
                            sourceEl: sourceEl,
                            repairXY: Ext.fly(sourceEl).getXY(),
                            ddel: d,
                            record:(component.store.getAt(idx))?component.store.getAt(idx):null
                        };
                    }
                },
                getRepairXY: function() {
                    return this.dragData.repairXY;
                },
                onStartDrag:function(x,y)
                {
                },
                onBeforeDrag :function( data, e )
                {
                },
                onMouseDown:function( e )
                {
                    var t,idx,record;
                    component.dragData.info = null;
                    try {
                        t = e.getTarget(component.itemSelector);
                        this.setDelta(50,50);
                        idx = component.indexOf(t);
                        record = component.store.getAt(idx);
                        // Found a record to move
                        if (t && record) {
                            component.dragData.info = {
                                origIdx : idx,
                                lastIdx : idx,
                                record  : record,
                                node: t
                            };
                            return true;
                        }
                    } catch (ex) { console.log(ex); component.dragData.info = null; }
                    return false;
                },
                onDrag : function(e) {
                    var t,idx,record,data = component.dragData.info;
                    if (!data) { return false; }
                    try {
                        t = e.getTarget(component.itemSelector);
                        idx = component.indexOf(t);
                        record = component.store.getAt(idx);

                        if (idx === data.lastIdx) { return true; }

                        if (t && record) {
                            data.lastIdx = idx;
                            if( component.lastTarget === null ||  component.lastTarget !== idx)
                            {
                                component.store.remove(data.record);
                                component.store.insert(idx, [data.record]);
                                var node = component.getNodes(idx,idx);
                                if(node.length > 0 )
                                {
                                    node = node[0];
                                    var src = component.dragData.info.node;
                                    node.style.background =  src.style.background;
                                    var old_preloader = win.AppWindow_tpl_returnTilePreloader(data.node);
                                    var old_body = win.AppWindow_tpl_returnTileBody(data.node);

                                    if(old_body && old_body.style.display!=="none")
                                    {
                                        //App has been already loaded
                                        var preloader = win.AppWindow_tpl_returnTilePreloader(node);
                                        var body = win.AppWindow_tpl_returnTileBody(node);
                                        node.replaceChild(old_preloader,preloader);
                                        node.replaceChild(old_body,body);
                                        win.AppWindow_tpl_showTilePreloader(false,node);
                                        component.dragData.info.node = node;
                                    }
                                    else
                                    {
                                        // App hasn't been already loaded
                                        win.AppWindow_tpl_configureTilePreloader(node);
                                        win.AppWindow_tpl_configureTileBody(node);
                                    }

                                }
                            }
                            return true;
                        }
                    } catch (ex) { return false; }
                    return false;


                }
            });

            component.dropZone =  new Ext.dd.DropZone(component.el, {
                ddGroup: CloudCommon.getNamespaceFromClass(component.$className),
                onNodeEnter:function( nodeData, source, e, data )
                {

                },
                getTargetFromEvent: function(e) {
                    return e.getTarget();
                },
                onNodeOut : function(target, dd, e, data){

                },
                onNodeOver : function(target, dd, e, data){
                    var crtTarget = e.getTarget(component.itemSelector);
                    component.lastTarget = component.indexOf(crtTarget);
                    return Ext.dd.DropZone.prototype.dropAllowed;
                },
                onNodeDrop : function(target, dd, e, data){
                    var el = Ext.fly(target);
                    var cls = component.itemSelector.replace("div.","");
                    if(!CloudCommon.hasClass(dd.dragData.ddel,cls))
                    {
                        //If it's not sort dragging
                        if(dd.dragData.record)
                        {
                            win.AppWindow_tpl_addNewTile(dd.dragData.record);

                        }
                    }
                    return true;
                }
            });

            win.AppWindow_tpl_setSidebarWidthOnRearrange();

            component.store.on("datachanged",function(str, eOpts){
                 win.AppWindow_tpl_setSidebarWidthOnRearrange();
            });


        }
    },

    onDataviewRender1: function(component, eOpts) {
        var win = component.up("window");
        if(win)
        {
            component.el.on("contextmenu", Ext.emptyFn, null, {preventDefault: true});

            //Create drag zone for icon
            component.dragZone = new Ext.dd.DragZone(component.el, {

                ddGroup: CloudCommon.getNamespaceFromClass(component.$className),
                endDrag : function(e) {
                    //win.Tpl_Sidebar_vw_updateHandlerBar();
                    if (!component.dragData) { return true; }
                    return true;
                },
                getDragData: function(e) {
                    var sourceEl = e.getTarget(component.itemSelector);
                    var idx = component.indexOf(sourceEl);
                    if (sourceEl) {
                        d = sourceEl.cloneNode(true);
                        d.style.width = component.dragItemSize.width +"px";
                        d.style.height = component.dragItemSize.height +"px";
                        d.id = Ext.id();
                        return component.dragData = {
                            sourceEl: sourceEl,
                            repairXY: Ext.fly(sourceEl).getXY(),
                            ddel: d,
                            record:(component.store.getAt(idx))?component.store.getAt(idx):null
                        };
                    }
                },
                getRepairXY: function() {
                    return component.dragData.repairXY;
                },
                onMouseDown:function( e )
                {
                    var t,idx,record;
                    try {
                        t = e.getTarget(component.itemSelector);
                        this.setDelta(50,50);
                    }
                    catch(ex){
                        return false;
                    }
                }
            });



            component.dropZone =  new Ext.dd.DropZone(component.el, {
                ddGroup: CloudCommon.getNamespaceFromClass(component.$className),
                onNodeEnter:function( nodeData, source, e, data )
                {

                },
                getTargetFromEvent: function(e) {
                    return e.getTarget();
                },
                onNodeOut : function(target, dd, e, data){
                },
                onNodeOver : function(target, dd, e, data){
                    return Ext.dd.DropZone.prototype.dropAllowed;
                },
                onNodeDrop : function(target, dd, e, data){
                    var el = Ext.fly(target);
                    var cls = component.itemSelector.replace("div.","");
                    if(!CloudCommon.hasClass(dd.dragData.ddel,cls))
                    {
                        var src = dd.dragData.sourceEl;
                        var record = dd.dragData.record;
                        win.AppWindow_tpl_removeTile(record,src);

                    }
                    return true;

                }
            });
            var me = component;
            component.f = function()
            {
                //Set Width
                component.minWidth = me.store.getCount() * component.itemSize.width;
                component.maxWidth = me.store.getCount() * component.itemSize.width;
                component.setWidth(me.store.getCount() * component.itemSize.width);
                //Set Height
                component.minHeight = component.itemSize.height;
                component.maxHeight = component.itemSize.height;
                component.setHeight = component.itemSize.height;
                console.log(me.store.getCount());
            };
            component.f();
            var cnt = component.up("container");
            component.store.on("datachanged",function(str, eOpts){
                var sizeEl = this.getCount() * component.itemSize.width;
                 if(sizeEl <= cnt.el.dom.clientWidth) cnt.el.dom.style.overflowX = 'hidden';
                 else cnt.el.dom.style.overflowX = 'auto';

                component.f();

            });

        }


    }

});