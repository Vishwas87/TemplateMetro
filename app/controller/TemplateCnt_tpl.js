/*
 * File: app/controller/TemplateCnt_tpl.js
 *
 * This file was generated by Sencha Architect version 3.0.4.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 4.2.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 4.2.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('TemplateMetro.controller.TemplateCnt_tpl', {
    extend: 'Ext.app.Controller',

    mixins: {
        mix: 'MetroMixin.controller.TemplateCnt_tpl'
    },

    controllers: [
        'MainCnt'
    ],
    models: [
        'TemplateMdl_App',
        'TemplateMdl_AppPreference'
    ],
    stores: [
        'TemplateStr_RunningWidget',
        'TemplateStr_Apps',
        'TemplateStr_AppPreferences'
    ],

    tplCnt_initialize: function(application) {

        var appRef = CloudCommon.getAppRef(this.$className);
        appRef = (appRef.app)?appRef.app:null;

        var main_cnt = this.getMainCntController();

        var runningWdgStoreRef = this.getTemplateStr_RunningWidgetStore();
        var appListStoreRef = this.getTemplateStr_AppsStore();
        var appPrefStoreRef = this.getTemplateStr_AppPreferencesStore();

        var preloader = this.TemplateCnt_tpl_getPreloader();

        var me = this;
        var funLoadPrefs = function()
        {
            //1) Load App Preferences
            var scope  = this;
            var appName = appRef.name ;

            //Generic Error Handler
            var errorCB = function(err)
            {
                console.log(err);
            };
            //Success Handler
            var prefLoaded = function(res)
            {
                //Prefs Founded --> Load sidebar
                if(preloader && preloader.isVisible()) preloader.updateText(CloudCommon.getTranslationFor(appRef.name,"PREF_LOADED"));

                var rec = appPrefStoreRef.getAt(0);
                var prefs = rec.get("preferences");
                var parameters =
                    {
                        preloader: me.TemplateCnt_tpl_getPreloader(),
                        app: application,
                        preferences: prefs
                    };
                if(appRef && main_cnt && typeof main_cnt.mainCnt_onStart === "function") main_cnt.mainCnt_onStart(parameters);

            };
            //No Prefs found for app ---> let create it
            var noPrefFound = function(err)
            {
               if(preloader && preloader.isVisible()) preloader.updateText(CloudCommon.getTranslationFor(appRef.name,"NOPREF_FOUND"));
                //The timeout is just to show the preloader msg
                setTimeout(function(){
                    appPrefStoreRef.pInsert({
                        id:appName,
                        app_id:appName,
                        preferences:
                        {
                            sidebar:{}
                        }
                    },prefLoaded,errorCB,scope);

                },600);

            };
            //Show Preloader info
            if(preloader.isHidden()) preloader.show(); //Show Preloader
            if(preloader && preloader.isVisible()) preloader.updateText(CloudCommon.getTranslationFor(appRef.name,"PREF_LOADING"));
            setTimeout(function(){
                appPrefStoreRef.searchById(appName,prefLoaded,noPrefFound,scope);
            },800);


        };


        if(preloader && preloader.isVisible()) preloader.updateText(CloudCommon.getTranslationFor(appRef.name,"APPLIST_LOADING"));

        var funLoadAppList = function()
        {
            appListStoreRef.load(function(){
                if(preloader && preloader.isVisible()) preloader.updateText(CloudCommon.getTranslationFor(appRef.name,"APPLIST_LOADED"));
                funLoadPrefs();
            });

        };


        funLoadAppList();









    },

    tplCnt_deInitialize: function(application) {

    },

    tplCnt_dismiss: function() {

    },

    tplCnt_getCountRunningWdg: function() {

    },

    tplCnt_getCountAvailableWdg: function() {

    },

    onLaunch: function() {

        //Ext.create('TemplateMetro.view.AppWindow_tpl', {renderTo: Ext.getBody()}).show();

        var appRef = CloudCommon.getAppRef(this.$className);
        appRef = (appRef.app)?appRef.app:null;
        var cnt = this.getMainCntController();



        var preloader = this.TemplateCnt_tpl_getPreloader();
        preloader.show(); //Show Preloader
        preloader.updateText(CloudCommon.getTranslationFor(appRef.name,"MSG_LOADING"));

        if(appRef && cnt)
        {
            var params =
                {
                    preloader: preloader,
                    app: appRef
                };

            if(typeof cnt.mainCnt_onInit === "function") cnt.mainCnt_onInit(this.tplCnt_initialize,params,this);
            else this.tplCnt_initialize(appRef);
        }
    }

});
